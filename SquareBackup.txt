using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Interop;
using System.Windows.Media.Imaging;

namespace BoardgamSolver
{
    public class CaptureScreen
    {
        private static object lockArray = new object();

        public static async Task<byte[]> CaptureNextNumbers(RECT window)
        {
            List<Task> tasks = new List<Task>();

            byte[] results = new byte[3];

            do
            {

                Parallel.For(0, 3, x =>
                 {
                     tasks.Add(FindNumber(window, x, (x * 107) + 330, 395, results, "Top"));
                 });

                await Task.WhenAll(tasks);

            } while (results.Distinct().Count() == 1 && results.First() == 0);

            return results;
        }

        public static async Task<byte[]> Capture(RECT window)
        {
            List<Task> tasks = new List<Task>();

            byte[] results = new byte[36];

            Parallel.For(0, 6, y =>
            {
                tasks.Add(FindNumber(window, y, 70, (y * 145) + 575, results));
            });

            await Task.WhenAll(tasks);
            tasks.Clear();


            return results;

        }



        public static int GetHash(Bitmap bmpSource)
        {
            int result = 0;

            for (int j = 0; j < bmpSource.Height; j += 4)
            {
                for (int i = 0; i < bmpSource.Width; i += 2)
                {
                    result += bmpSource.GetPixel(i, j).GetBrightness() < 0.2f ? 0 : 1;
                }
            }

            return result;

        }

        public struct FoundNumber
        {
            public int Hash { get; set; }
            public byte Number { get; set; }
        }

        public static async Task FindNumber(RECT window, int index, int X, int Y, byte[] results, string filename = "Result")
        {
            using (var screenStream = new MemoryStream())
            {
                using (var rowBmp = new Bitmap(300, 60))
                {
                    for (int x = 0; x < 6; x++)
                    {
                        using (var cellBmp = new Bitmap(50, 60))
                        {
                            using (var bmpGraphics = Graphics.FromImage(rowBmp))
                            {
                                bmpGraphics.CopyFromScreen(window.Left + X + (x * 145), window.Top + Y, x * 50, 0, new System.Drawing.Size(50, 60));
                            }
                        }


                    }

                    var background = rowBmp.GetPixel(2, 30);

                    for (int j = 0; j < rowBmp.Height; j += 1)
                    {
                        for (int i = 0; i < rowBmp.Width; i += 1)
                        {
                            var p = rowBmp.GetPixel(i, j);
                            if ((Math.Abs(p.GetBrightness() - background.GetBrightness())) > .1f)
                            {
                                rowBmp.SetPixel(i, j, Color.Black);
                            }
                            else
                            {
                                rowBmp.SetPixel(i, j, Color.White);
                            }
                        }
                    }

                    rowBmp.Save(screenStream, ImageFormat.Png);



                    //var hash = GetHash(screenBmp);


                    //if (hash == 450)
                    //{
                    //    // Empty
                    //    results[index] = 0;
                    //    screenBmp.Save(@$".\{filename}_{index}_{hash}_E.png", ImageFormat.Png);

                    //    return;
                    //}


                    screenStream.Seek(0, SeekOrigin.Begin);
                    var value = await RecognizeText.MakeOCRRequest(screenStream);

                    if (value == null) { return; }

                    var text = string.Join('_', value?.RecognitionResult.Lines.Select(l => l.Text));
                    rowBmp.Save(@$".\{filename}_{index}_{text}.png", ImageFormat.Png);

                    int width = 25;
                    char[] result = new char[6];

                    do
                    {
                        var found = value.RecognitionResult.Lines.Where(l => width > l.BoundingBox[0] && width < l.BoundingBox[2]).FirstOrDefault();

                        if (found != null)
                        {
                            var count = 0;
                            while (count < found.Text.Length)
                            {
                                if (!Char.IsWhiteSpace(found.Text[count]))
                                {
                                    result[width / 50] = found.Text[count];
                                    width += 50;
                                }
                                count++;
                            }
                        }
                        else
                        {
                            width += 50;
                        }
                    } while (width < 300);

                    for (int x = 0; x < 6; x++)
                    {
                        if (((int)result[x]) != 0)
                        {
                            if (byte.TryParse(result[x].ToString(), out var number) && number != 0)
                            {
                                results[x + (index * 6)] = number;
                            }
                            else
                            {
                                results[x + (index * 6)] = 10;
                            }
                        }
                    }
                }
            }
        }

    }
}
